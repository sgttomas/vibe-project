#!/bin/bash
# Chirality AI - Docker Compose Helper Script

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
COMPOSE_DIR="$PROJECT_ROOT/compose"
ENV_FILE="$PROJECT_ROOT/.env"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .env exists
check_env() {
    if [[ ! -f "$ENV_FILE" ]]; then
        log_error ".env file not found at $ENV_FILE"
        log_info "Copy .env.example to .env and set your values:"
        log_info "  cp .env.example .env"
        log_info "  open -e .env"
        exit 1
    fi
}

# Load environment variables
load_env() {
    if [[ -f "$ENV_FILE" ]]; then
        set -a
        source "$ENV_FILE"
        set +a
    fi
}

# Main commands
cmd_up() {
    log_info "Starting Chirality AI backend services..."
    check_env
    load_env
    
    cd "$COMPOSE_DIR"
    
    # Check for --build flag
    if [[ "$1" == "--build" ]]; then
        log_info "Building images from source..."
        docker compose up -d --build
    else
        docker compose up -d
    fi
    
    log_success "Services started!"
    cmd_status
}

cmd_down() {
    log_info "Stopping Chirality AI backend services..."
    cd "$COMPOSE_DIR"
    docker compose down
    log_success "Services stopped!"
}

cmd_logs() {
    cd "$COMPOSE_DIR"
    if [[ -n "$1" ]]; then
        log_info "Following logs for service: $1"
        docker compose logs -f "$1"
    else
        log_info "Following logs for all services..."
        docker compose logs -f
    fi
}

cmd_status() {
    cd "$COMPOSE_DIR"
    load_env
    
    echo ""
    log_info "Service Status:"
    docker compose ps
    
    echo ""
    log_info "Available Endpoints:"
    echo -e "  ${GREEN}•${NC} Admin UI:      http://localhost:${ADMIN_PORT:-3001}"
    echo -e "  ${GREEN}•${NC} GraphQL:      http://localhost:${GRAPHQL_PORT:-8080}/graphql"
    echo -e "  ${GREEN}•${NC} Neo4j Browser: http://localhost:${NEO4J_HTTP_PORT:-7474}"
    echo -e "  ${GREEN}•${NC} Frontend:     http://localhost:${FRONTEND_PORT:-3210} (run separately)"
    echo ""
    
    # Health checks
    log_info "Health Checks:"
    
    # Check GraphQL
    if curl -s "http://localhost:${GRAPHQL_PORT:-8080}/health" >/dev/null 2>&1; then
        echo -e "  ${GREEN}✓${NC} GraphQL service healthy"
    else
        echo -e "  ${RED}✗${NC} GraphQL service unhealthy"
    fi
    
    # Check Admin
    if curl -s "http://localhost:${ADMIN_PORT:-3001}/api/orchestrate/status" >/dev/null 2>&1; then
        echo -e "  ${GREEN}✓${NC} Admin service healthy"
    else
        echo -e "  ${RED}✗${NC} Admin service unhealthy"
    fi
    
    # Check Neo4j
    if curl -s "http://localhost:${NEO4J_HTTP_PORT:-7474}" >/dev/null 2>&1; then
        echo -e "  ${GREEN}✓${NC} Neo4j database healthy"
    else
        echo -e "  ${RED}✗${NC} Neo4j database unhealthy"
    fi
    
    echo ""
}

cmd_reset() {
    log_warning "This will delete all Neo4j data!"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Stopping services and removing data..."
        cmd_down
        docker volume rm chirality_neo4j-data chirality_neo4j-logs 2>/dev/null || true
        log_success "Data reset complete!"
        log_info "Run './scripts/chirality up' to restart with fresh data"
    else
        log_info "Reset cancelled"
    fi
}

cmd_help() {
    echo "Chirality AI - Docker Compose Helper"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  up [--build]    Start backend services (optionally rebuild)"
    echo "  down            Stop backend services"
    echo "  logs [service]  Follow logs (all services or specific service)"
    echo "  status          Show service status and endpoints"
    echo "  reset           Reset Neo4j data (WARNING: destructive)"
    echo "  help            Show this help message"
    echo ""
    echo "Services:"
    echo "  neo4j           Neo4j graph database"
    echo "  graphql         GraphQL service"
    echo "  admin           Admin/Orchestrator service"
    echo ""
    echo "Examples:"
    echo "  $0 up --build   # Start with rebuild"
    echo "  $0 logs neo4j   # Follow Neo4j logs"
    echo "  $0 status       # Check service health"
    echo ""
}

# Main script logic
case "${1:-help}" in
    up)
        cmd_up "$2"
        ;;
    down)
        cmd_down
        ;;
    logs)
        cmd_logs "$2"
        ;;
    status)
        cmd_status
        ;;
    reset)
        cmd_reset
        ;;
    help|--help|-h)
        cmd_help
        ;;
    *)
        log_error "Unknown command: $1"
        echo ""
        cmd_help
        exit 1
        ;;
esac